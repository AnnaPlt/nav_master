global_frame: odom
robot_base_frame: base_footprint

plugins:
 - {name: obstacle_st_layer,     type: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"}
 - {name: inflation_layer,      type: "costmap_2d::InflationLayer"}

footprint: [[-0.63, -0.30], [-0.63, 0.30], [0.73,0.30], [0.73, -0.30]] #[[-0.30, -0.63], [-0.30, 0.63], [0.30,0.63], [0.30, -0.63]] # if the robot is not circular
#footprint_padding: 0.01

update_frequency: 10.0     # Hz (how often the costmap is updated)
publish_frequency: 30.0    # Hz (how often the costmap is published)
transform_tolerance: 0.5  # Allowable TF delay in seconds

width: 10.0    #in metri = 200 celle
height: 10.0   #in metri = 200 celle

resolution: 0.05          # Cell size in meters (5 cm per cell)
rolling_window: true      # Local map moves with the robot
always_send_full_costmap: true



obstacle_st_layer:
  enabled:                  true
  voxel_decay:              0.5    # seconds if linear, e^n if exponential
  decay_model:              0     # 0=linear, 1=exponential, -1=persistent
  voxel_size:               0.05  # meters
  track_unknown_space:      true  # default space is known
  max_obstacle_height:      2.0   # meters
  unknown_threshold:        15    # voxel height
  mark_threshold:           0     # voxel height
  update_footprint_enabled: true
  combination_method:       1     # 1=max, 0=override
  obstacle_range:           5.5   # meters
  origin_z:                 0.0   # meters
  publish_voxel_map:        false # default off
  transform_tolerance:      0.2   # seconds
  mapping_mode:             false # default off, saves map not for navigation
  map_save_duration:        60    # default 60s, how often to autosave
  observation_sources:      scan_left scan_right
  scan_left:
    data_type: LaserScan
    topic: /scan_left
    marking: true
    clearing: true
    min_obstacle_height: 0.3     # default 0, meters
    max_obstacle_height: 2.0     # default 3, meters
    expected_update_rate: 0.0    # default 0, if not updating at this rate at least, remove from buffer
    observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
    inf_is_valid: false          # default false, for laser scans
    filter: "passthrough"        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on
    voxel_min_points: 0          # default 0, minimum points per voxel for voxel filter
    clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it
  scan_right:
    data_type: LaserScan
    topic: /scan_right
    marking: true
    clearing: true
    min_obstacle_height: 0.3     # default 0, meters
    max_obstacle_height: 2.0     # default 3, meters
    expected_update_rate: 0.0    # default 0, if not updating at this rate at least, remove from buffer
    observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
    inf_is_valid: false          # default false, for laser scans
    filter: "passthrough"        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on
    voxel_min_points: 0          # default 0, minimum points per voxel for voxel filter
    clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it

inflation_layer:
  inflation_radius: 0.1   # max distance from an obstacle at which costs are incurred for planning paths (light blue area around obstacles)
  cost_scaling_factor:  1.0  # exponential rate at which the obstacle cost drops off (default: 10) 

